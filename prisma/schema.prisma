// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  full_name     String
  email         String   @unique
  password      String
  photo_profile String   @default("https://res.cloudinary.com/dhd8czwky/image/upload/v1754142705/default_xumlki.webp")
  cover_photo   String?
  bio           String   @default("")
  created_at    DateTime @default(now())
  created_by    Int?
  updated_at    DateTime @updatedAt
  updated_by    Int?

  threads   threads[]   @relation("UserThreads")
  replies   replies[]   @relation("UserReplies")
  likes     likes[]     @relation("UserLikes")
  following following[] @relation("Follower")
  followers following[] @relation("Following")
}

model threads {
  id                Int      @id @default(autoincrement())
  content           String
  image             String?
  number_of_replies Int?
  created_at        DateTime @default(now())
  created_by        Int
  updated_at        DateTime @updatedAt
  updated_by        Int?

  user    users     @relation("UserThreads", fields: [created_by], references: [id])
  replies replies[]
  likes   likes[]
}

model replies {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int
  image      String?
  content    String
  created_at DateTime @default(now())
  created_by Int
  updated_at DateTime @updatedAt
  updated_by Int?
  likes      likes[]

  user   users   @relation("UserReplies", fields: [user_id], references: [id])
  thread threads @relation(fields: [thread_id], references: [id])
}

model likes {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int?
  reply_id   Int?
  created_at DateTime @default(now())
  created_by Int
  updated_at DateTime @updatedAt
  updated_by Int?

  user   users    @relation("UserLikes", fields: [user_id], references: [id])
  thread threads? @relation(fields: [thread_id], references: [id])
  reply  replies? @relation(fields: [reply_id], references: [id])
  @@unique([user_id, thread_id])
  @@unique([user_id, reply_id])
}

model following {
  id           Int      @id @default(autoincrement())
  following_id Int
  follower_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  follower  users @relation("Follower", fields: [follower_id], references: [id])
  following users @relation("Following", fields: [following_id], references: [id])
}
